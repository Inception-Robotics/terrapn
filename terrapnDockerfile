FROM nvidia/cuda:11.3.1-cudnn8-devel-ubuntu18.04

# Installing ROS Noetic
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update -q && \
    apt-get upgrade -yq && \
    apt-get install -yq wget curl git build-essential vim sudo lsb-release locales bash-completion
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
RUN apt-get update -q && \
    apt-get install -y ros-melodic-desktop-full &&\
    apt install -y python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential &&\
    apt install -y python-rosdep &&\
    rm -rf /var/lib/apt/lists/*
RUN rosdep init
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8
RUN rosdep update

RUN apt-get install -y git
RUN apt-get install wget

# Installing miniconda
ENV PATH="/root/miniconda3/bin:${PATH}"
ARG PATH="/root/miniconda3/bin:${PATH}"
WORKDIR /
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
RUN chmod +x Miniconda3*
RUN bash Miniconda3* -b

# Building terrapn packages
RUN mkdir -p /opt/terrapn_ws/src
WORKDIR /opt/terrapn_ws/src

RUN git clone https://github.com/Inception-Robotics/terrapn.git

WORKDIR /opt/terrapn_ws/
RUN rosdep install --from-paths src --ignore-src -r -y
RUN .  /opt/ros/melodic/setup.sh && catkin_make 

WORKDIR /opt/terrapn_ws/src/terrapn/conda
RUN conda env create -f terrapn.yml

RUN conda init


# Setting up GUI access
# Install required packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      bash \
      fluxbox \
      git \
      net-tools \
      novnc \
      supervisor \
      x11vnc \
      xterm \
      xvfb && \
    rm -rf /var/lib/apt/lists/*
# Create configuration directory for Supervisor
RUN mkdir -p /app/conf.d
# Create the Supervisor configuration file
RUN echo '[supervisord]\nnodaemon=true\n\n[include]\nfiles = /app/conf.d/*.conf' > /app/supervisord.conf
# Create individual service configurations
RUN echo '[program:fluxbox]\ncommand=fluxbox\nautorestart=true' > /app/conf.d/fluxbox.conf
RUN echo '[program:websockify]\ncommand=websockify --web /usr/share/novnc 8080 localhost:5900\nautorestart=true' > /app/conf.d/websockify.conf
RUN echo '[program:x11vnc]\ncommand=x11vnc -forever -shared\nautorestart=true' > /app/conf.d/x11vnc.conf
RUN echo '[program:xvfb]\ncommand=Xvfb :0 -screen 0 "%(ENV_DISPLAY_WIDTH)s"x"%(ENV_DISPLAY_HEIGHT)s"x24 -listen tcp -ac\nautorestart=true' > /app/conf.d/xvfb.conf
# Setup demo environment variables
ENV HOME=/root \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8 \
    LC_ALL=C.UTF-8 \
    DISPLAY=:0.0 \
    DISPLAY_WIDTH=1024 \
    DISPLAY_HEIGHT=768 \
    RUN_XTERM=yes \
    RUN_FLUXBOX=yes
# Embed the entrypoint logic
CMD if [ "$RUN_FLUXBOX" = "no" ] || [ "$RUN_FLUXBOX" = "false" ] || [ "$RUN_FLUXBOX" = "n" ] || [ "$RUN_FLUXBOX" = "0" ]; then rm -f /app/conf.d/fluxbox.conf; fi && \
    if [ "$RUN_XTERM" = "no" ] || [ "$RUN_XTERM" = "false" ] || [ "$RUN_XTERM" = "n" ] || [ "$RUN_XTERM" = "0" ]; then rm -f /app/conf.d/xterm.conf; fi && \
    exec supervisord -c /app/supervisord.conf
# Expose the necessary port
EXPOSE 8080
